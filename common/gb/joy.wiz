import "gb";
import "banks";

namespace joy {
    in ram {
        namespace bit {
            let A = 0;
            let B = 1;
            let SELECT = 2;
            let START = 3;
            let RIGHT = 4;
            let LEFT = 5;
            let UP = 6;
            let DOWN = 7;
        }

        namespace mask {
            let A = 1 << bit.A;
            let B = 1 << bit.B;
            let SELECT = 1 << bit.SELECT;
            let START = 1 << bit.START;
            let RIGHT = 1 << bit.RIGHT;
            let LEFT = 1 << bit.LEFT;
            let UP = 1 << bit.UP;
            let DOWN = 1 << bit.DOWN;
        }

        var unpress : u8;
        var pressed : u8;
        var reset : u8;
        var was_reset_already : u8;
    }

    func init() {
        unpress = a = 0;
        pressed = a = 0;
        reset = a = 0;
        was_reset_already = a = 0;

        update();
        a = reset;
        if a != 0 {
            was_reset_already = a = 1;
            reset = a = 0;
        }
    }    

    // Read joypad data unfiltered so it can be passed to input checking or SGB packet read routines.
    // Result: c = current controller state, a = joypad id.
    func read_raw() {
        // Read up/down/left/right.
        gb.joy.ctrl = a = gb.joy.select.DIRECTIONS;
        // Read twice are to prevent bounce.
        inline for let i in 1 .. 2 {
            a = gb.joy.ctrl;
        }
        // a = 0000dulr
        a = ~a & 0xF;
        // a = dulr0000
        swap_digits(a);
        // controls = a
        c = a;

        // Read A/B/Select/Start
        gb.joy.ctrl = a = gb.joy.select.BUTTONS;
        // Read 6 times to prevent bounce.
        inline for let i in 1 .. 6 {
            a = gb.joy.ctrl;
        }
        // a = dulrssba
        a = (~a & 0xF) | c;
        // controls = a
        c = a;    

        // Get the joypad id.
        gb.joy.ctrl = a = gb.joy.select.DIRECTIONS | gb.joy.select.BUTTONS;
        // Read a few times to prevent bounce.
        inline for let i in 1 .. 4 {
            a = gb.joy.ctrl;
        }
        // Mask off the id and invert to get an increasing ID number.
        a = (a & 0xF) ^ 0xF;
    }

    // Convenience for getting the buttons for a single player usage.
    func update() {
        read_raw();

        // Remove unpress flag for controls no longer being held.
        // unpress = unpress & controls
        unpress = a = unpress & c;
        // Only keep controls that don't have the unpress flag set.
        pressed = a = ~a & c;

        // Check for the reset combo, but only if not just reset
        a = c & 0xF;
        if a == 0xF {
            a = was_reset_already;
            if a == 0 {
                reset = a = 1;
            }
        } else {
            was_reset_already = a = 0;
        }
    }    
}