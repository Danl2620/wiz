import "gb";
import "banks";

config {
    gbc_compatible = true,
}

in ram {
    namespace stack {
        let SIZE = 256;
        var data : [u8; SIZE];
    }

    struct Level {
        width : u8,
        height : u8,
        tiles : *u8,
        blocks : *u8,
    }

    var level : Level;
}

in rom @ 0x150 {
    import "memory";
    import "joy";
    import "video";
    import "gbc_util";

    func main() {
        interrupt = false;
        sp = &stack.data as u16 + stack.SIZE - 1;

        gbc_util.detect();
        gbc_util.set_speed(gb.color.SPEED_MASK_TURBO_ON);

        // Turn off the screen.
        video.disable();

        video.init();
        joy.init();

        // Set up a simple black-to-white 4-color palette.
        gb.mono.palette.bg = a = 0b00011011;
        if { a = gbc_util.gbc_detected; } && a != 0 {
            gb.color.palette.bg.index = a = gb.color.palette.INDEX_AUTO_INCREMENT;

            gb.color.palette.bg.data = a = 0b00000000;
            gb.color.palette.bg.data = a = 0b00000000;

            gb.color.palette.bg.data = a = 0b10001100;
            gb.color.palette.bg.data = a = 0b00110001;

            gb.color.palette.bg.data = a = 0b00011000;
            gb.color.palette.bg.data = a = 0b01100011;

            gb.color.palette.bg.data = a = 0b11111111;
            gb.color.palette.bg.data = a = 0b01111111;
        }

        memcpy(&gb.ram.tile[0], &sprites_chr[0], sizeof(typeof(sprites_chr)));
        memcpy(&gb.ram.tile[0x1000], &tiles_chr[0], sizeof(typeof(tiles_chr)));

        // Clear screen.
        memset(&gb.ram.map[0], 4, 1024);

        level_system.load(&level1_data as u16);

        // Turn the screen back on, with backgrounds enabled.
        gb.lcd.ctrl = a = gb.lcd.CTRL_ON | gb.lcd.CTRL_BG_ON;

        // Enable some basic interrupts.
        gb.interrupt.flag = a = 0;
        gb.interrupt.enable = a = gb.interrupt.VBLANK | gb.interrupt.STAT;
        gb.lcd.stat = a = gb.lcd.STAT_SCANLINE_ENABLE;
        interrupt = true;

        while true {
            joy.update();
            video.request_update();
        }
    }

    #[irq]
    func draw() {
        video.acknowledge_update();
        hl = pop();
        de = pop();
        bc = pop();
        af = pop();
    }

    #[irq]
    func stub() {
        hl = pop();
        de = pop();
        bc = pop();
        af = pop();
    }

    let stat = stub;
    let timer = stub;
    let serial = stub;
    let joypad = stub;

    namespace level_system {
        #[fallthrough]
        func load(source : u16 in hl) {
            a = *(hl++ as *u8);
            push(hl);

            c = a; b = 0; inline for in 1 .. 2 { c <<= 1; b <<<<#= 1; }

            l = a = <:&environments + c;
            h = a = >:&environments +# b;

            <:level.tiles = a = *(hl++ as *u8);
            >:level.tiles = a = *(hl++ as *u8);
            <:level.blocks = a = *(hl++ as *u8);
            >:level.blocks = a = *(hl++ as *u8);
            hl = pop();

            level.width = a = *(hl++ as *u8);
            level.height = a = *(hl++ as *u8);

            de = &gb.ram.map as u16;
        }

        func load_tilemap_offscreen(dest : u16 in de, source : u16 in hl) {
            b = 0x03;
            ^do {
                push(hl);

                c = 0x08;
                do {
                    push(bc);
                    push(de);

                    a = *(hl++ as *u8);
                    push(hl);

                    c = a; b = 0; inline for in 1 .. 3 { c <<= 1; b <<<<#= 1; }
                    l = a = <:level.blocks + c;
                    h = a = >:level.blocks +# b;

                    inline for in 1 .. 4 {
                        inline for in 1 .. 2 {
                            load_tile_offscreen(de, hl);
                        }

                        e = a = e + (32 * 2 - 4); if carry { d++; }
                    }

                    hl = pop();

                    de = pop();
                    e = a = e + 4; if carry { d++; }

                    bc = pop();
                    c--;
                } while !zero;

                hl = pop();
                l = a = level.width + l; if carry { h++; }
                e = a = e + (32 * 7); if carry { d++; }

                b--;
            } while !zero;
        }

        func load_tile_offscreen(dest : u16 in de, source : u16 in hl) {
            a = *(hl++ as *u8);
            push(hl);

            c = a; b = 0; inline for in 1 .. 2 { c <<= 1; b <<<<#= 1; }
            l = a = <:level.tiles + c;
            h = a = >:level.tiles +# b;

            *(de as *u8) = a = *(hl++ as *u8); de++;
            *(de as *u8) = a = *(hl++ as *u8); de++;

            push(de);
            e = a = e + (32 - 2); if carry { d++; }

            *(de as *u8) = a = *(hl++ as *u8); de++;
            *(de as *u8) = a = *(hl++ as *u8); de++;
            de = pop();

            hl = pop();
        }
    }

    const sprites_chr = embed "sprites.chr";
    const tiles_chr = embed "tiles.chr";
    const font_chr = embed "font.chr";

    struct Environment {
        tiles : *const u8,
        blocks : *const u8,
    }

    const environments = [
        // Grassland.
        Environment {
            tiles = @[
                // 0x00: bg sky
                0x02u8, 0x02,
                0x02, 0x02,
                // 0x01: bg sky bottom-left dot .
                0x02, 0x02,
                0x12, 0x02,
                // 0x02: bg mountain top-left / 
                0x02, 0x10,
                0x10, 0x01,
                // 0x03: bg mountain inner
                0x01, 0x01,
                0x01, 0x01,
                // 0x04: bg mountain top-right \
                0x11, 0x02,
                0x01, 0x11,
                // 0x05: bg cloud left
                0x0A, 0x03,
                0x1A, 0x03,
                // 0x06: bg cloud inner 
                0x03, 0x03,
                0x03, 0x03,
                // 0x07: bg cloud right
                0x03, 0x0B,
                0x03, 0x1B,
                // 0x08: door
                0x08, 0x09,
                0x18, 0x19,
                // 0x09: brick
                0x04, 0x04,
                0x04, 0x04,
                // 0x0A: hill top-left / on bg sky
                0x02, 0x05,
                0x05, 0x16,
                // 0x0B: hill top-left / on bg mountain
                0x01, 0x15,
                0x15, 0x16,
                // 0x0C: hill top
                0x06, 0x06,
                0x16, 0x16,
                // 0x0D: hill top-right / on bg sky
                0x07, 0x02,
                0x16, 0x07,
                // 0x0E: hill top-right / on bg mountain
                0x17, 0x01,
                0x16, 0x17,
                // 0x0F: hill inner
                0x16, 0x16,
                0x16, 0x16, 
            ],
            blocks = @[
                // 0x00: empty
                0x00u8, 0x00,
                0x00, 0x00,
                0x00, 0x00,
                0x00, 0x00,
                // 0x01: sky 1
                0x00, 0x01,
                0x00, 0x00,
                0x00, 0x05,
                0x01, 0x00,
                // 0x02: sky 2
                0x00, 0x00,
                0x00, 0x00,
                0x07, 0x00,
                0x00, 0x00,
                // 0x03: sky 3
                0x00, 0x01,
                0x00, 0x00,
                0x00, 0x00,
                0x01, 0x00,
                // 0x04: sky 4
                0x00, 0x00,
                0x05, 0x07,
                0x01, 0x00,
                0x00, 0x00,
                // 0x05: low uphill 1
                0x00, 0x00,
                0x02, 0x04,
                0x03, 0x0B,
                0x0B, 0x0F,
                // 0x06: low uphill 2
                0x00, 0x00,
                0x0A, 0x0C,
                0x0F, 0x0F,
                0x0F, 0x0F,        
                // 0x07: downhill 1
                0x00, 0x00,
                0x0D, 0x00,
                0x0F, 0x0D,
                0x0F, 0x0F,
                // 0x08: flat with / mountain
                0x00, 0x00,
                0x00, 0x02,
                0x02, 0x03,
                0x0C, 0x0C,        
                // 0x09: flat with ^ mountain
                0x02, 0x04,
                0x03, 0x03,
                0x03, 0x03,
                0x0C, 0x0C,
                // 0x0A: flat with \ mountain
                0x00, 0x00,
                0x04, 0x00,
                0x03, 0x04,
                0x0C, 0x0C,
                // 0x0B: flat with mountain end
                0x00, 0x00,
                0x00, 0x00,
                0x00, 0x00,
                0x00, 0x00,
                // 0x0C: solid ground
                0x0F, 0x0F,
                0x0F, 0x0F,
                0x0F, 0x0F,
                0x0F, 0x0F,
                // 0x0D: solid ground top
                0x0C, 0x0C,
                0x0F, 0x0F,
                0x0F, 0x0F,
                0x0F, 0x0F,
                // 0x0E: bg high mountain /
                0x00, 0x02,
                0x02, 0x03,
                0x03, 0x03,
                0x03, 0x03,        
                // 0x0F: bg high mountain \
                0x04, 0x00,
                0x03, 0x04,
                0x03, 0x03,
                0x03, 0x03,
            ]
        },
    ];

    const level1_data : [u8] = [
        // environment_id
        0,
        // width, height
        10, 4,
        // data
        0x01, 0x02, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04,
        0x0E, 0x0F, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x08, 0x09,
        0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
    ];
}