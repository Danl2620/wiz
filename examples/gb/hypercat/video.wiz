import "gb";
import "oam";
import "banks";
import "memory";

namespace video {
    in ram {
        var dark_mode : u8;
        var request_redraw : u8;
        var oam_buffer_ptr : *u8;        
        var oam_buffer_data @ 0xCF00 : [u8; 160];
    }

    func init() {
        request_redraw = a = 0;
        dark_mode = a;

        oam_buffer_clear();
    }

    func wait() {
        do {
            a = gb.lcd.stat & gb.lcd.STAT_MODE_MASK;
        } while a != gb.lcd.STAT_MODE_VBLANK;
    }

    func delay_frame() {
        wait();
        do {
            a = gb.lcd.stat & gb.lcd.STAT_MODE_MASK;
        } while !zero;
    }

    func disable() {
        wait();
        gb.lcd.ctrl = a = 0;
    }

    func request_update() {
        hl = &request_redraw as u16;
        ++*(hl as *u8);

        do {
            halt();
            a = *(hl as *u8);
        } while a != 0;
    }

    func oam_buffer_clear() {
        memset(&oam_buffer_data as u16, 0, oam_buffer_data.len);

        <:oam_buffer_ptr = a = <:&oam_buffer_data;
        >:oam_buffer_ptr = a = >:&oam_buffer_data;
    }

    func oam_buffer_open() {
        hl = &oam_buffer_ptr as u16;
        a = *(hl++ as *u8);
        h = *(hl as *u8);
        l = a;
    }

    func oam_buffer_close() {
        <:oam_buffer_ptr = a = l;
        >:oam_buffer_ptr = a = h;
    }

    func acknowledge_update() {        
        if { a = request_redraw; } && a != 0 {
            oam.transfer(>:&oam_buffer_data);

            if { a = dark_mode; } && a == 0 {
                gb.mono.palette.bg = a = 0b00011011;
            } else {
                gb.mono.palette.bg = a = 0b11100100;
            }

            hl = &request_redraw as u16;
            --*(hl as *u8);
        }
    }
}