import "gb";
import "banks";

in ram {
    namespace stack {
        let SIZE = 256;
        var data : [u8; SIZE];
    }

    var started : u8;
    var mosaic : u8;
    var scroll_x : u8;
    var scroll_y : u8;
}

in rom @ 0x150 {
    import "memory";
    import "joy";
    import "video";
    import "gbc_util";
    import "sgb_util";
    import "sgbx_protocol";

    func main() {
        interrupt = false;
        hl = &stack.data as u16 + stack.SIZE - 1;
        sp = hl;

        gbc_util.detect();
        gbc_util.set_speed(gb.color.SPEED_MASK_TURBO_ON);
        inline memset(0xC000 as *u8, 0, 0x2000);

        // Turn off the screen.
        sgb_util.detect();
        video.init();
        video.disable();

        sgbx_protocol.init();
        joy.init();

        memset(&gb.ram.vram[0], 0, sizeof(typeof(gb.ram.vram)));

        if { a = sgb_util.sgb_detected; } && a != 0 {
            // Running on a Super Game Boy.

            // Enable SGB mask.
            //sgb_util.send_packet(&sgb_mask_enable[0]);
            // Copy the SNES program into GB tileset memory.
            memcpy(&gb.ram.tile[0], &snes_main[0], sizeof(typeof(snes_main)));
            // Layout the tilemap to do a VRAM transfer via SGB packet.
            sgb_util.prepare_vram_transfer_offscreen();
            // Send the packet sequence to upload 4K of RAM.
            sgb_util.send_packet(&sgb_upload_packet[0]);

            // NOTE: If we were uploading a larger SNES program, it would likely require multiple VRAM sends.
            // We would need turn off the screen again, load the next 4K of data, then do another transfer, and only do the JUMP at the very end.
            // We would probably want to manually construct the DATA_SND packets and send single packets rather than using hardcoded packet sequences in ROM.

            // Send a packet sequence to dispatch the uploaded program.
            sgb_util.send_packet_sequence(&sgb_post_upload_sequence[0]);

        } else {
            // Not running on a Super Game Boy.
            // Turn the screen back on, with backgrounds enabled using tileset 2.
            gb.mono.palette.bg = a = 0b11100100;
            gb.mono.palette.obj1 = a = 0b11100000;
            gb.mono.palette.obj2 = a = 0b01101011;
            gb.lcd.ctrl = a = gb.lcd.CTRL_ON | gb.lcd.CTRL_TILESET2 | gb.lcd.CTRL_BG_ON;
        }

        // Enable some basic interrupts.
        gb.interrupt.flag = a = 0;
        gb.interrupt.enable = a = gb.interrupt.VBLANK;
        gb.lcd.stat = a = 0;
        interrupt = true;

        started = a = 0;
        mosaic = a = 0;

        ^while true {
            //debug_break();
            joy.update();

            b = a = joy.pressed;
            if b $ joy.bit.A {
                started = a = 1;
            } else if b $ joy.bit.B {
                if { a = started; } && a != 0 {
                    mosaic = a = mosaic + 0x04;
                }
            } else if b $ joy.bit.START {
                started = a = 0;
                mosaic = a = 0;
            } else if b $ joy.bit.SELECT {
                scroll_x = a = 0;
                scroll_y = a;
            }

            if b $ joy.bit.LEFT {
                scroll_x = a = scroll_x + 1;
            } else if b $ joy.bit.RIGHT {
                scroll_x = a = scroll_x - 1;
            } else if b $ joy.bit.UP {
                scroll_y = a = scroll_y + 1;
            } else if b $ joy.bit.DOWN {
                scroll_y = a = scroll_y - 1;
            }

            hl = &sgbx_protocol.data[0] as u16;
            if { a = started; } && a != 0 {
                ++*(hl as *u8);
            }
            hl++;
            *(hl++ as *u8) = a = mosaic;
            *(hl++ as *u8) = a = scroll_x;
            *(hl++ as *u8) = a = scroll_y;

            if { a = started; } && a == 0 {
                bc = message1.len;
                hl = &message1 as u16;
            } else {
                bc = message2.len;
                hl = &message2 as u16;
            }

            de = &sgbx_protocol.data[300] as u16;
            *(de as *u8) = a = c;
            de++;
            *(de as *u8) = a = b;
            de++;
            memcpy(de as *u8, hl as *u8, bc);

            sgbx_protocol.request_transfer();

            video.request_update();
        }
    }

    #[irq]
    func draw() {
        video.acknowledge_update();
        sgbx_protocol.complete_transfer();
        hl = pop();
        de = pop();
        bc = pop();
        af = pop();
    }

    #[irq]
    func stub() {
        hl = pop();
        de = pop();
        bc = pop();
        af = pop();
    }

    let stat = stub;
    let timer = stub;
    let serial = stub;
    let joypad = stub;

    // Helper function to create a single 16-byte SGB packet.
    let SGB_PACKET(
        b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15
    ) = [b0 | 1 as u8, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15];

    const sgb_mask_enable_packet = SGB_PACKET(gb.super.MASK_EN, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const sgb_upload_packet = SGB_PACKET(gb.super.DATA_TRN, 0x00, 0x00, 0x7F, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

    const message1 = "  PRESS A.  ";
    const message2 = "HELLO  WORLD";

    const sgb_post_upload_sequence : [u8]
        // Mute sound output from the SNES APU.
        // (Also enables IPL ROM on the SPC, allowing to custom SPC700 code to be uploaded.)
        = SGB_PACKET(
            gb.super.SOUND,
            0, 0, 0, 0xFE,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        // Jump to the uploaded code, using two fixed-address entry points
        // at the start of uploaded data to jump to a main routine + NMI routine.
        ~ SGB_PACKET(
            gb.super.JUMP,
            0x00, 0x00, 0x7F,
            0x03, 0x00, 0x7F,
            0, 0, 0, 0, 0, 0, 0, 0, 0)
        ~ [0xFF];

    const snes_main = embed "snes_main.bin";
}