import "gb";
import "banks";
import "memory";

// A custom transfer protocol to enable quick transfers to the SNES,
// Basically hands over a small buffer to the SNES every frame, so the SNES can immediately handle it, and interpret the data in a custom way.
// For now the GB side does nothing special, other than write its buffer into the tile data each vblank with an unrolled loop, but may contain more logic later.
namespace sgbx_protocol {
    // The data length was chosen to fit mostly in vblank, plus a couple hblank scanlines extra.
    // This way, the data can be immediately read by the SNES by the time the first few rows of the GB screen has completed rendering.
    //
    // It may make sense to use all the hblank time to transfer extra data, but:
    //
    // 1) hblank has much less throughput than vblank (~4 bytes/hblank)
    // 2) the ICD2 only has enough buffer for 4 rows (20 tiles per row) of screen data.
    // 3) if hblanks spill into the screen, it wouldn't be safe to read this data without tearing. (unless you do the hblanks BEFORE vblank instead of after, but harder to implement)
    // 4) if the data isn't available right away, the screen layout would have to be different to ensure that the data will be in the ICD2's VRAM buffer.
    // 5) waiting for the data would introduce anywhere from latency, potentially 1/2 frame or even a full frame depending on the amount of data sent.
    // 6) with all of those drawbacks in mind, it also eats a fair chunk of ROM space to unroll loops like this.
    //
    // So, if the data is much larger than that, then it makes more sense to turn off the screen, write the data and then enable the screen.
    let DATA_LENGTH = 320;

    let TRANSFER_BYTES_PER_VBLANK = 240;
    let TRANSFER_HBLANK_COUNT = 10;
    let TRANSFER_BYTES_PER_HBLANK = 8;

    // VRAM offset is the second row so that we can spend a few more cycles to fill an entire 320-byte row without tearing.
    // This adds a bit more latency between SNES and GB, and requires a few extra CPU cycles on the GB side, but it
    // should be acceptable.
    let VRAM_COLUMN_COUNT = 20;
    let VRAM_BYTES_PER_TILE = 16;
    let VRAM_WRITE_OFFSET = VRAM_COLUMN_COUNT * VRAM_BYTES_PER_TILE;

    in ram {
        var temp_sp : u16;

        var transfer_request : u8;
        var data : [u8; DATA_LENGTH];
    }

    let init = clear;

    func clear() {
        transfer_request = a = 0;
        memset(&data[0], 0, sizeof(typeof(data)));
    }

    inline func request_transfer() {
        transfer_request = a = 1;
    }

    inline func _transfer_step() {
        de = pop();
        *(hl++ as *u8) = a = e;
        *(hl++ as *u8) = a = d;
    }

    inline func _halt_and_transfer_step() {
        gb.interrupt.flag = a = 0;
        de = pop();
        bc = pop();
        a = e;
        halt();
        *(hl++ as *u8) = a;
        *(hl++ as *u8) = a = d;
        *(hl++ as *u8) = a = c;
        *(hl++ as *u8) = a = b;
    }

    func complete_transfer() {
        a = transfer_request; 
        if a == 0 {
            return;
        }

        temp_sp = sp;

        sp = &data[0] as u16;
        hl = &gb.ram.tile[VRAM_WRITE_OFFSET] as u16;

        inline for in 1 .. TRANSFER_BYTES_PER_VBLANK / 2 {
            _transfer_step();
        }

        interrupt = false;
        gb.interrupt.enable = a = gb.interrupt.STAT;
        gb.lcd.stat = a = gb.lcd.STAT_HBLANK_ENABLE;

        inline for in 1 .. TRANSFER_HBLANK_COUNT {
            _halt_and_transfer_step();
            _transfer_step();
            _transfer_step();
        }

        transfer_request = a = 0;

        hl = &temp_sp as u16;
        a = *(hl++ as *u8);
        h = *(hl as *u8);
        l = a;
        sp = hl;

        gb.lcd.stat = a = 0;        
        gb.interrupt.enable = a = gb.interrupt.VBLANK;

    }
}
