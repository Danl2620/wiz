import "globals";

namespace math {
    // Original page: http://codebase64.org/doku.php?id=base:8bit_atan2_8-bit_angle
    //
    // Calculate the angle, in a 256-degree circle, between two points.
    // The trick is to use logarithmic division to get the y/x ratio and
    // integrate the power function into the atan table. Some branching is
    // avoided by using a table to adjust for the octants.
    // In otherwords nothing new or particularily clever but nevertheless
    // quite useful.
    //
    // by Johan Forsl√∂f (doynax)
    //
    // Additional modifications by: Andrew G. Crowell
    // - adapted to Wiz, changed naming to match rest of project
    // - set carry to a known state before adding/subtracting, as recommended on the wiki
    func atan2(x1 : u8 in b0, y1 : u8 in b1, x2 : u8 in b2, y2 : u8 in b3) : u8 in a {
        var octant : u8 in b4;

        octant = a = 0;
        a = x1 - x2;
        if !carry {
            a ^= 0xFF;
        }
        x = a;
        octant <<<<#= 1;

        a = y1 - y2;
        if !carry {
            a ^= 0xFF;
        }
        y = a;
        octant <<<<#= 1;

        a = log2_times_32_table[x] - log2_times_32_table[y];
        if carry {
            a ^= 0xFF;
        }
        x = a;

        y = a = (octant <<<<# 1) & 0x7;

        a = atan_logarithmic_table[x] ^ octant_adjust[y];
        return a;
    }    

    const octant_adjust : [u8; 8] = [
        0b00111111, // x+, y+, |x| > |y|
        0b00000000, // x+, y+, |x| < |y|
        0b11000000, // x+, y-, |x| > |y|
        0b11111111, // x+, y-, |x| < |y|
        0b01000000, // x-, y+, |x| > |y|
        0b01111111, // x-, y+, |x| < |y|
        0b10111111, // x-, y-, |x| > |y|
        0b10000000, // x-, y-, |x| < |y|
    ];

    // atan(2 ^ (x / 32)) * 128 / pi
    const atan_logarithmic_table : [u8; 256] = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02,
        0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
        0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
        0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
        0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04,
        0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
        0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
        0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
        0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x08, 0x08,
        0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09,
        0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B,
        0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D,
        0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F,
        0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x12, 0x12,
        0x12, 0x13, 0x13, 0x13, 0x14, 0x14, 0x15, 0x15,
        0x15, 0x16, 0x16, 0x17, 0x17, 0x17, 0x18, 0x18,
        0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1B, 0x1B, 0x1C,
        0x1C, 0x1C, 0x1D, 0x1D, 0x1E, 0x1E, 0x1F, 0x1F,
    ];

    const log2_times_32_table : [u8; 256] = [
        0x00, 0x00, 0x20, 0x32, 0x40, 0x4A, 0x52, 0x59,
        0x60, 0x65, 0x6A, 0x6E, 0x72, 0x76, 0x79, 0x7D,
        0x80, 0x82, 0x85, 0x87, 0x8A, 0x8C, 0x8E, 0x90,
        0x92, 0x94, 0x96, 0x98, 0x99, 0x9B, 0x9D, 0x9E,
        0xA0, 0xA1, 0xA2, 0xA4, 0xA5, 0xA6, 0xA7, 0xA9,
        0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1,
        0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9,
        0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBD, 0xBE, 0xBF,
        0xC0, 0xC0, 0xC1, 0xC2, 0xC2, 0xC3, 0xC4, 0xC4,
        0xC5, 0xC6, 0xC6, 0xC7, 0xC7, 0xC8, 0xC9, 0xC9,
        0xCA, 0xCA, 0xCB, 0xCC, 0xCC, 0xCD, 0xCD, 0xCE,
        0xCE, 0xCF, 0xCF, 0xD0, 0xD0, 0xD1, 0xD1, 0xD2,
        0xD2, 0xD3, 0xD3, 0xD4, 0xD4, 0xD5, 0xD5, 0xD5,
        0xD6, 0xD6, 0xD7, 0xD7, 0xD8, 0xD8, 0xD9, 0xD9,
        0xD9, 0xDA, 0xDA, 0xDB, 0xDB, 0xDB, 0xDC, 0xDC,
        0xDD, 0xDD, 0xDD, 0xDE, 0xDE, 0xDE, 0xDF, 0xDF,
        0xDF, 0xE0, 0xE0, 0xE1, 0xE1, 0xE1, 0xE2, 0xE2,
        0xE2, 0xE3, 0xE3, 0xE3, 0xE4, 0xE4, 0xE4, 0xE5,
        0xE5, 0xE5, 0xE6, 0xE6, 0xE6, 0xE7, 0xE7, 0xE7,
        0xE7, 0xE8, 0xE8, 0xE8, 0xE9, 0xE9, 0xE9, 0xEA,
        0xEA, 0xEA, 0xEA, 0xEB, 0xEB, 0xEB, 0xEC, 0xEC,
        0xEC, 0xEC, 0xED, 0xED, 0xED, 0xED, 0xEE, 0xEE,
        0xEE, 0xEE, 0xEF, 0xEF, 0xEF, 0xEF, 0xF0, 0xF0,
        0xF0, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF2, 0xF2,
        0xF2, 0xF2, 0xF3, 0xF3, 0xF3, 0xF3, 0xF4, 0xF4,
        0xF4, 0xF4, 0xF5, 0xF5, 0xF5, 0xF5, 0xF5, 0xF6,
        0xF6, 0xF6, 0xF6, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7,
        0xF8, 0xF8, 0xF8, 0xF8, 0xF9, 0xF9, 0xF9, 0xF9,
        0xF9, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFB, 0xFB,
        0xFB, 0xFB, 0xFB, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC,
        0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFE, 0xFE,
        0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    ];

    const powers_of_two : [u8; 8] = [(1 << n) for let n in 0 .. 7];


    // import math
    //  
    // sine_float_values = [math.sin(float(x) / 256.0 * (2.0 * math.pi)) * 32767.0 for x in range(256)]
    // sine_int_values = [int(math.floor(x)) for x in sine_float_values]
    // sine_uint_values = [((-x ^ 0xFFFF) + 1) if x < 0 else x for x in sine_int_values]
    // sine_uint_values_l = [x & 0xFF for x in sine_uint_values]
    // sine_uint_values_h = [(x >> 8) & 0xFF for x in sine_uint_values]
    //  
    // print('const sine_table_l : [u8; 256] = [' + ', '.join('0x{0:02X}'.format(x) for x in sine_uint_values_l) + '];')
    // print('const sine_table_h : [u8; 256] = [' + ', '.join('0x{0:02X}'.format(x) for x in sine_uint_values_h) + '];')
    const sine_table_l : [u8; 256] = [
        0x00, 0x24, 0x47, 0x6A, 0x8B, 0xAB, 0xC7, 0xE1, 0xF8, 0x0B, 0x19, 0x23, 0x27, 0x26, 0x1E, 0x10, 0xFB, 0xDE, 0xB9, 0x8C, 0x56, 0x16, 0xCD, 0x7A, 0x1C, 0xB3, 0x3F, 0xBF, 0x33, 0x9A, 0xF4, 0x42, 0x81, 0xB3, 0xD6, 0xEB, 0xF1, 0xE7, 0xCE, 0xA5, 0x6C, 0x23, 0xC9, 0x5E, 0xE1, 0x54, 0xB5, 0x03, 0x40, 0x6B, 0x83, 0x89, 0x7C, 0x5C, 0x29, 0xE2, 0x89, 0x1C, 0x9C, 0x08, 0x61, 0xA6, 0xD7, 0xF5, 
        0xFF, 0xF5, 0xD7, 0xA6, 0x61, 0x08, 0x9C, 0x1C, 0x89, 0xE2, 0x29, 0x5C, 0x7C, 0x89, 0x83, 0x6B, 0x40, 0x03, 0xB5, 0x54, 0xE1, 0x5E, 0xC9, 0x23, 0x6C, 0xA5, 0xCE, 0xE7, 0xF1, 0xEB, 0xD6, 0xB3, 0x81, 0x42, 0xF4, 0x9A, 0x33, 0xBF, 0x3F, 0xB3, 0x1C, 0x7A, 0xCD, 0x16, 0x56, 0x8C, 0xB9, 0xDE, 0xFB, 0x10, 0x1E, 0x26, 0x27, 0x23, 0x19, 0x0B, 0xF8, 0xE1, 0xC7, 0xAB, 0x8B, 0x6A, 0x47, 0x24,
        0x00, 0xDB, 0xB8, 0x95, 0x74, 0x54, 0x38, 0x1E, 0x07, 0xF4, 0xE6, 0xDC, 0xD8, 0xD9, 0xE1, 0xEF, 0x04, 0x21, 0x46, 0x73, 0xA9, 0xE9, 0x32, 0x85, 0xE3, 0x4C, 0xC0, 0x40, 0xCC, 0x65, 0x0B, 0xBD, 0x7E, 0x4C, 0x29, 0x14, 0x0E, 0x18, 0x31, 0x5A, 0x93, 0xDC, 0x36, 0xA1, 0x1E, 0xAB, 0x4A, 0xFC, 0xBF, 0x94, 0x7C, 0x76, 0x83, 0xA3, 0xD6, 0x1D, 0x76, 0xE3, 0x63, 0xF7, 0x9E, 0x59, 0x28, 0x0A,
        0x01, 0x0A, 0x28, 0x59, 0x9E, 0xF7, 0x63, 0xE3, 0x76, 0x1D, 0xD6, 0xA3, 0x83, 0x76, 0x7C, 0x94, 0xBF, 0xFC, 0x4A, 0xAB, 0x1E, 0xA1, 0x36, 0xDC, 0x93, 0x5A, 0x31, 0x18, 0x0E, 0x14, 0x29, 0x4C, 0x7E, 0xBD, 0x0B, 0x65, 0xCC, 0x40, 0xC0, 0x4C, 0xE3, 0x85, 0x32, 0xE9, 0xA9, 0x73, 0x46, 0x21, 0x04, 0xEF, 0xE1, 0xD9, 0xD8, 0xDC, 0xE6, 0xF4, 0x07, 0x1E, 0x38, 0x54, 0x74, 0x95, 0xB8, 0xDB,
    ];

    const sine_table_h : [u8; 256] = [
        0x00, 0x03, 0x06, 0x09, 0x0C, 0x0F, 0x12, 0x15, 0x18, 0x1C, 0x1F, 0x22, 0x25, 0x28, 0x2B, 0x2E, 0x30, 0x33, 0x36, 0x39, 0x3C, 0x3F, 0x41, 0x44, 0x47, 0x49, 0x4C, 0x4E, 0x51, 0x53, 0x55, 0x58, 0x5A, 0x5C, 0x5E, 0x60, 0x62, 0x64, 0x66, 0x68, 0x6A, 0x6C, 0x6D, 0x6F, 0x70, 0x72, 0x73, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7C, 0x7D, 0x7E, 0x7E, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,
        0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7E, 0x7E, 0x7D, 0x7C, 0x7C, 0x7B, 0x7A, 0x79, 0x78, 0x77, 0x76, 0x75, 0x73, 0x72, 0x70, 0x6F, 0x6D, 0x6C, 0x6A, 0x68, 0x66, 0x64, 0x62, 0x60, 0x5E, 0x5C, 0x5A, 0x58, 0x55, 0x53, 0x51, 0x4E, 0x4C, 0x49, 0x47, 0x44, 0x41, 0x3F, 0x3C, 0x39, 0x36, 0x33, 0x30, 0x2E, 0x2B, 0x28, 0x25, 0x22, 0x1F, 0x1C, 0x18, 0x15, 0x12, 0x0F, 0x0C, 0x09, 0x06, 0x03,
        0x00, 0xFC, 0xF9, 0xF6, 0xF3, 0xF0, 0xED, 0xEA, 0xE7, 0xE3, 0xE0, 0xDD, 0xDA, 0xD7, 0xD4, 0xD1, 0xCF, 0xCC, 0xC9, 0xC6, 0xC3, 0xC0, 0xBE, 0xBB, 0xB8, 0xB6, 0xB3, 0xB1, 0xAE, 0xAC, 0xAA, 0xA7, 0xA5, 0xA3, 0xA1, 0x9F, 0x9D, 0x9B, 0x99, 0x97, 0x95, 0x93, 0x92, 0x90, 0x8F, 0x8D, 0x8C, 0x8A, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x83, 0x82, 0x81, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80,
        0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x81, 0x82, 0x83, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8C, 0x8D, 0x8F, 0x90, 0x92, 0x93, 0x95, 0x97, 0x99, 0x9B, 0x9D, 0x9F, 0xA1, 0xA3, 0xA5, 0xA7, 0xAA, 0xAC, 0xAE, 0xB1, 0xB3, 0xB6, 0xB8, 0xBB, 0xBE, 0xC0, 0xC3, 0xC6, 0xC9, 0xCC, 0xCF, 0xD1, 0xD4, 0xD7, 0xDA, 0xDD, 0xE0, 0xE3, 0xE7, 0xEA, 0xED, 0xF0, 0xF3, 0xF6, 0xF9, 0xFC,
    ];

    const cosine_table_l : [u8; 256] = [
        0x01, 0x0A, 0x28, 0x59, 0x9E, 0xF7, 0x63, 0xE3, 0x76, 0x1D, 0xD6, 0xA3, 0x83, 0x76, 0x7C, 0x94, 0xBF, 0xFC, 0x4A, 0xAB, 0x1E, 0xA1, 0x36, 0xDC, 0x93, 0x5A, 0x31, 0x18, 0x0E, 0x14, 0x29, 0x4C, 0x7E, 0xBD, 0x0B, 0x65, 0xCC, 0x40, 0xC0, 0x4C, 0xE3, 0x85, 0x32, 0xE9, 0xA9, 0x73, 0x46, 0x21, 0x04, 0xEF, 0xE1, 0xD9, 0xD8, 0xDC, 0xE6, 0xF4, 0x07, 0x1E, 0x38, 0x54, 0x74, 0x95, 0xB8, 0xDB,
        0x00, 0x24, 0x47, 0x6A, 0x8B, 0xAB, 0xC7, 0xE1, 0xF8, 0x0B, 0x19, 0x23, 0x27, 0x26, 0x1E, 0x10, 0xFB, 0xDE, 0xB9, 0x8C, 0x56, 0x16, 0xCD, 0x7A, 0x1C, 0xB3, 0x3F, 0xBF, 0x33, 0x9A, 0xF4, 0x42, 0x81, 0xB3, 0xD6, 0xEB, 0xF1, 0xE7, 0xCE, 0xA5, 0x6C, 0x23, 0xC9, 0x5E, 0xE1, 0x54, 0xB5, 0x03, 0x40, 0x6B, 0x83, 0x89, 0x7C, 0x5C, 0x29, 0xE2, 0x89, 0x1C, 0x9C, 0x08, 0x61, 0xA6, 0xD7, 0xF5, 
        0xFF, 0xF5, 0xD7, 0xA6, 0x61, 0x08, 0x9C, 0x1C, 0x89, 0xE2, 0x29, 0x5C, 0x7C, 0x89, 0x83, 0x6B, 0x40, 0x03, 0xB5, 0x54, 0xE1, 0x5E, 0xC9, 0x23, 0x6C, 0xA5, 0xCE, 0xE7, 0xF1, 0xEB, 0xD6, 0xB3, 0x81, 0x42, 0xF4, 0x9A, 0x33, 0xBF, 0x3F, 0xB3, 0x1C, 0x7A, 0xCD, 0x16, 0x56, 0x8C, 0xB9, 0xDE, 0xFB, 0x10, 0x1E, 0x26, 0x27, 0x23, 0x19, 0x0B, 0xF8, 0xE1, 0xC7, 0xAB, 0x8B, 0x6A, 0x47, 0x24,
        0x00, 0xDB, 0xB8, 0x95, 0x74, 0x54, 0x38, 0x1E, 0x07, 0xF4, 0xE6, 0xDC, 0xD8, 0xD9, 0xE1, 0xEF, 0x04, 0x21, 0x46, 0x73, 0xA9, 0xE9, 0x32, 0x85, 0xE3, 0x4C, 0xC0, 0x40, 0xCC, 0x65, 0x0B, 0xBD, 0x7E, 0x4C, 0x29, 0x14, 0x0E, 0x18, 0x31, 0x5A, 0x93, 0xDC, 0x36, 0xA1, 0x1E, 0xAB, 0x4A, 0xFC, 0xBF, 0x94, 0x7C, 0x76, 0x83, 0xA3, 0xD6, 0x1D, 0x76, 0xE3, 0x63, 0xF7, 0x9E, 0x59, 0x28, 0x0A,
    ];
    
    const cosine_table_h : [u8; 256] = [
        0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7E, 0x7E, 0x7D, 0x7C, 0x7C, 0x7B, 0x7A, 0x79, 0x78, 0x77, 0x76, 0x75, 0x73, 0x72, 0x70, 0x6F, 0x6D, 0x6C, 0x6A, 0x68, 0x66, 0x64, 0x62, 0x60, 0x5E, 0x5C, 0x5A, 0x58, 0x55, 0x53, 0x51, 0x4E, 0x4C, 0x49, 0x47, 0x44, 0x41, 0x3F, 0x3C, 0x39, 0x36, 0x33, 0x30, 0x2E, 0x2B, 0x28, 0x25, 0x22, 0x1F, 0x1C, 0x18, 0x15, 0x12, 0x0F, 0x0C, 0x09, 0x06, 0x03,
        0x00, 0xFC, 0xF9, 0xF6, 0xF3, 0xF0, 0xED, 0xEA, 0xE7, 0xE3, 0xE0, 0xDD, 0xDA, 0xD7, 0xD4, 0xD1, 0xCF, 0xCC, 0xC9, 0xC6, 0xC3, 0xC0, 0xBE, 0xBB, 0xB8, 0xB6, 0xB3, 0xB1, 0xAE, 0xAC, 0xAA, 0xA7, 0xA5, 0xA3, 0xA1, 0x9F, 0x9D, 0x9B, 0x99, 0x97, 0x95, 0x93, 0x92, 0x90, 0x8F, 0x8D, 0x8C, 0x8A, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x83, 0x82, 0x81, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80,
        0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x81, 0x82, 0x83, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8C, 0x8D, 0x8F, 0x90, 0x92, 0x93, 0x95, 0x97, 0x99, 0x9B, 0x9D, 0x9F, 0xA1, 0xA3, 0xA5, 0xA7, 0xAA, 0xAC, 0xAE, 0xB1, 0xB3, 0xB6, 0xB8, 0xBB, 0xBE, 0xC0, 0xC3, 0xC6, 0xC9, 0xCC, 0xCF, 0xD1, 0xD4, 0xD7, 0xDA, 0xDD, 0xE0, 0xE3, 0xE7, 0xEA, 0xED, 0xF0, 0xF3, 0xF6, 0xF9, 0xFC,
        0x00, 0x03, 0x06, 0x09, 0x0C, 0x0F, 0x12, 0x15, 0x18, 0x1C, 0x1F, 0x22, 0x25, 0x28, 0x2B, 0x2E, 0x30, 0x33, 0x36, 0x39, 0x3C, 0x3F, 0x41, 0x44, 0x47, 0x49, 0x4C, 0x4E, 0x51, 0x53, 0x55, 0x58, 0x5A, 0x5C, 0x5E, 0x60, 0x62, 0x64, 0x66, 0x68, 0x6A, 0x6C, 0x6D, 0x6F, 0x70, 0x72, 0x73, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7C, 0x7D, 0x7E, 0x7E, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,
    ];    
}