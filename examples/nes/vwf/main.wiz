import "nes";
import "banks";
import "globals";

in prg {
    import "vwf";
    import "vram_buffer";

    func main() {
        // Disable decimal arithmetic (though not actually supported on 2A03 anyway)
        decimal = false;
        // Disable interrupts.
        nointerrupt = true;
        // Prepare stack.
        s = x = 0xFF;

        // Turn off rendering.
        nes.ppu.control = x = 0;
        nes.ppu.mask = x;
        // Disable DMC interrupts.
        nes.apu.frame_counter = a = nes.apu.FRAME_COUNTER_IRQ_DISABLE;

        // Wait for the PPU to be ready to use, which takes 2 vertical blanks.
        do {
            do {} while !nes.ppu.status$7;
            x++;
        } while x != 2;

        // Read PPU status to reset the PPU high/low latch.
        a = nes.ppu.status;

        // Setup the PPU for copying to the nametable.
        nes.ppu.address = a = >:nes.ppu.ADDRESS_NAMETABLE_DATA;
        nes.ppu.address = a = <:nes.ppu.ADDRESS_NAMETABLE_DATA;
        // Clear the nametable.
        x = >:nes.ppu.NAMETABLE_SIZE * 2;
        do {
            y = 0;
            do {
                nes.ppu.data = a;
                y++;
            } while !zero;

            x--;
        } while !zero;

        // Setup the PPU for copying to the pattern memory.
        nes.ppu.address = a = >:nes.ppu.ADDRESS_PATTERN_DATA;
        nes.ppu.address = a = <:nes.ppu.ADDRESS_PATTERN_DATA;
        // Clear the pattern data.
        x = >:nes.ppu.PATTERN_SIZE * 2;
        do {
            y = 0;
            do {
                nes.ppu.data = a;
                y++;
            } while !zero;

            x--;
        } while !zero;

        // Setup the PPU for copying to the palette.
        nes.ppu.address = a = >:nes.ppu.ADDRESS_PALETTE_DATA;
        nes.ppu.address = a = <:nes.ppu.ADDRESS_PALETTE_DATA;
        // Clear the palette.
        x = 0;            
        do {
            nes.ppu.data = a = palette[x];
            x++;
        } while x != palette.len;

        a = nes.ppu.status; 
        nes.ppu.scroll = a = 0;
        nes.ppu.scroll = a;

        let TEXTBOX_BG_ADDR = nes.ppu.ADDRESS_NAMETABLE_DATA + (3 * 32) + 7;

        <:ptr0 = a = <:TEXTBOX_BG_ADDR;
        >:ptr0 = a = >:TEXTBOX_BG_ADDR;
        vwf.setup_canvas_offscreen(ptr0);
        
        vram_buffer.clear();

        // We're finally ready to show the screen!
        nes.ppu.control = a = nes.ppu.CONTROL_NMI;

        // Enable interrupts.
        nointerrupt = false;

        text_message_index = a = 0;

        ^while true {
            <:ptr0 = a = <:&messages;
            >:ptr0 = a = >:&messages;
            a = text_message_index;
            y = a = a << 1;
            <:text_ptr = a = ptr0[y]; y++;
            >:text_ptr = a = ptr0[y];
            text_color = a = 3;
            text_delay = a = 10;
            text_hold_timer = a = 180;
            vwf.init();
            while true {
                vram_buffer.clear();

                if { a = text_delay; } && zero {
                    <:ptr0 = a = <:text_ptr;
                    >:ptr0 = a = >:text_ptr;
                    if { y = 0; a = ptr0[y]; } && !zero {
                        b2 = a = text_color;
                        vwf.draw_text_character_queued(ptr0, b2);
                        <:text_ptr = a = <:ptr0;
                        >:text_ptr = a = >:ptr0;
                        text_color = a = b2;
                    } else {
                        if { a = text_hold_timer; } && !zero {
                            text_hold_timer--;
                        }
                    }
                } else {
                    text_delay--;
                }
                vram_buffer.request_transfer();

                do { a = vram_buffer.transfer_requested; } while !zero;

                if { a = text_hold_timer; } && zero {
                    break;
                }
            }

            b15 = a = 0;

            // FIXME: move the clear functionality into the VWF library.

            while { a = b15; } && a < vwf.CANVAS_WIDTH * vwf.CANVAS_HEIGHT {
                vram_buffer.clear();

                x = vram_buffer.position;

                var dest : *u8 in ptr0;
                <:dest = a = b15;
                >:dest = a = 0;

                inline for in 1 .. 4 {
                    <:dest <<= 1;
                    >:dest <<<<#= 1;
                }

                <:dest = a = <:dest + <:(nes.ppu.ADDRESS_PATTERN_DATA + vwf.TILE_START_INDEX * 16);
                >:dest = a = >:dest +# >:(nes.ppu.ADDRESS_PATTERN_DATA + vwf.TILE_START_INDEX * 16);

                y = 4;
                do {
                    vram_buffer.data[x] = a = 32 | vram_buffer.COMMAND_FILL; x++;
                    vram_buffer.data[x] = a = >:dest; x++;
                    vram_buffer.data[x] = a = <:dest; x++;
                    vram_buffer.data[x] = a = 0; x++;

                    <:dest = a = <:dest + 32;
                    >:dest = a = >:dest +# 0;

                    b15++;
                    b15++;
                    y--;
                } while !zero;

                vram_buffer.position = x;
                vram_buffer.request_transfer();

                do { a = vram_buffer.transfer_requested; } while !zero;
            }

            text_message_index++;
            if { a = text_message_index; } && a >= messages.len {
                text_message_index = a = 0;
            }            
        }
    }

    #[nmi] func draw() {
        push(a);
        a = x; push(a);
        a = y; push(a);
        a = nes.ppu.status; 

        vram_buffer.complete_transfer();

        nes.ppu.mask = a = nes.ppu.MASK_LEFTMOST_BG | nes.ppu.MASK_RENDER_BG;
        nes.ppu.scroll = a = 0;
        nes.ppu.scroll = a = 0;
        y = a = pop();
        x = a = pop();
        a = pop();
    }

    #[irq] func scanline() {
        push(a);
        a = x; push(a);
        a = y; push(a);
        y = a = pop();
        x = a = pop();
        a = pop();
    }

    const messages = [
        @"You want the \x02Burrito XL\x03?\nGreat choice! Let's see...\nThat will be... \x01$8\x03 please.\0",
        @"...Here you go.\nRemember to eat it while\nit's still fresh!\0",
        @"Thanks for checking out\nthis \x01variable width font\x03\ndemo.\0",
    ];

    const tile_copy_command : [u8] = [
        <:32, >:nes.ppu.ADDRESS_PATTERN_DATA, 0,
            0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
            0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0x00, 0x12, 0x34, 0x56, 0xFF,
        <:32, >:nes.ppu.ADDRESS_PATTERN_DATA, 32,
            0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
            0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0x00, 0x12, 0x34, 0x56, 0xFF,
        <:32, >:nes.ppu.ADDRESS_PATTERN_DATA, 64,
            0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
            0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0x00, 0x12, 0x34, 0x56, 0xFF,            
    ];

    const palette : [u8] = [
        // Tiles
        0x0F, 0x29, 0x25, 0x30,
        0x0F, 0x00, 0x10, 0x30,
        0x0F, 0x00, 0x10, 0x30,
        0x0F, 0x00, 0x10, 0x30,
        // Sprites
        0x0F, 0x00, 0x10, 0x30,
        0x0F, 0x00, 0x10, 0x30,
        0x0F, 0x00, 0x10, 0x30,
        0x0F, 0x00, 0x10, 0x30
    ];

    const @ 0xFFFA = [draw, main, scanline];
}